import time

from qkd_alice_implementation_class import QKDAliceImplementation
"""This File is responsible for execution of the Participant Alice"""


if __name__ == "__main__":
    ### IP, PORTs, CONNECTIONs ###
    #IP_ADDRESS_ALICE = "0.0.0.0"
    IP_ADDRESS_ALICE = "10.127.1.117"
    # IP_ADDRESS_ALICE = "127.0.0.2"
    #IP_ADDRESS_BOB = "127.0.0.3"
    IP_ADDRESS_BOB = "10.127.1.118"
    # IP_ADDRESS = "88.157.92.155"
    PORT_NUMBER_ALICE = 5000
    PORT_NUMBER_BOB = 65437
    # PORT_NUMBER_QUANTIC_CHANNEL = 16302
    PORT_NUMBER_QUANTIC_CHANNEL = 13122
    SHARED_SECRET_KEY = b'IzetXlgAnY4oye56'

    ### INPUTS ###
    KEY_LENGTH_DEFAULT = 2048
    BYTES_PER_FRAME_DEFAULT = 10
    SYNC_FRAMES_DEFAULT = 10
    SYNC_BYTES_DEFAULT = 10

    LOSS_RATE_DEFAULT = 0.0
    # KEY_LENGTH_DEFAULT = LOSS_RATE_DEFAULT * 1000
    QUBIT_FREQ_US_DEFAULT = 1000
    # QUBIT_FREQ_US_DEFAULT = 1 / KEY_LENGTH_DEFAULT * 10**6
    TEST_FRACTION = 0.1
    NUM_THREADS_DEFAULT = 1

    PA_COMPRESSION_RATE = 0.5  # 0 - No Privacy Amplification | >0 - Toeplitz Privacy Amplification with compression rate (Should be <1) | <0 - XOR Privacy Amplification
    # KEY_QUEUE = queue.Queue() # Queue to save all keys generated by threads

    single_thread_bool = False

    if single_thread_bool:

        participant_alice_obj = QKDAliceImplementation(IP_ADDRESS_ALICE, PORT_NUMBER_ALICE, IP_ADDRESS_BOB, PORT_NUMBER_BOB,
                                                       SHARED_SECRET_KEY)

        num_frames = KEY_LENGTH_DEFAULT // BYTES_PER_FRAME_DEFAULT

        alice_qubit_obj = participant_alice_obj.alice_quantum_step(KEY_LENGTH_DEFAULT, QUBIT_FREQ_US_DEFAULT, num_frames,
                                                                   BYTES_PER_FRAME_DEFAULT,
                                                                   SYNC_FRAMES_DEFAULT, SYNC_BYTES_DEFAULT,
                                                                   LOSS_RATE_DEFAULT,
                                                                   port_number_quantic_channel=PORT_NUMBER_QUANTIC_CHANNEL)

        participant_alice_obj.set_alice_bits_and_bases(alice_qubit_obj.bits, alice_qubit_obj.bases,
                                                       alice_qubit_obj.qubits_bytes)

        participant_alice_obj.alice_run_simulation_classical_process(do_test=True, test_fraction=TEST_FRACTION,
                                                                     error_threshold=0.1,
                                                                     privacy_amplification_compression_rate=PA_COMPRESSION_RATE)

    else:
        #Multi-threading
        quantum_channel_participant_alice_obj = QKDAliceImplementation(IP_ADDRESS_ALICE, PORT_NUMBER_ALICE, IP_ADDRESS_BOB,
                                                                       PORT_NUMBER_BOB, SHARED_SECRET_KEY)

        #Pseudo Static value of number of keys to perform and test multi-threading
        number_of_keys = 1

        classical_channel_participant_alice_obj = QKDAliceImplementation(IP_ADDRESS_ALICE, PORT_NUMBER_ALICE, IP_ADDRESS_BOB,
                                                                         PORT_NUMBER_BOB, SHARED_SECRET_KEY)

        classical_channel_participant_alice_obj.setup_role_alice()
        classical_channel_participant_alice_obj.start_read_communication_channel()


        start_execution_time_tick = time.perf_counter()
        for i in range(number_of_keys):
            print(f"Starting Thread: {i}")
            num_frames = KEY_LENGTH_DEFAULT // BYTES_PER_FRAME_DEFAULT

            alice_qubit_obj = quantum_channel_participant_alice_obj.alice_quantum_step(KEY_LENGTH_DEFAULT, QUBIT_FREQ_US_DEFAULT,
                                                                       num_frames,
                                                                       BYTES_PER_FRAME_DEFAULT,
                                                                       SYNC_FRAMES_DEFAULT, SYNC_BYTES_DEFAULT,
                                                                       LOSS_RATE_DEFAULT,
                                                                       port_number_quantic_channel=PORT_NUMBER_QUANTIC_CHANNEL)

            classical_channel_participant_alice_obj.alice_run_qkd_classical_process_threading(alice_qubit_obj.bits,
                                                                                              alice_qubit_obj.bases,
                                                                                              do_test=True, test_fraction=TEST_FRACTION,
                                                                                              error_threshold=0.1,
                                                                                              privacy_amplification_compression_rate=PA_COMPRESSION_RATE)
            print(f"End Thread {i}\n")
        classical_channel_participant_alice_obj.alice_join_threads()
        end_execution_time_tick = time.perf_counter()
        print(f"Alice Total Execution Threading Time: {end_execution_time_tick - start_execution_time_tick}")

        classical_channel_participant_alice_obj.alice_produce_statistical_data()