from qkd_bob_implementation_class import QKDBobImplementation
import time
"""This File is responsible for execution of the Participant Bob"""

if __name__ == "__main__":
    ### IP, PORTs, CONNECTIONs ###
    IP_ADDRESS_ALICE = "127.0.0.1"
    # IP_ADDRESS_ALICE = "6.tcp.eu.ngrok.io"
    IP_ADDRESS_BOB = "127.0.0.3"
    # IP_ADDRESS = "88.157.92.155"
    PORT_NUMBER_ALICE = 5000
    # PORT_NUMBER_ALICE = 65436
    PORT_NUMBER_BOB = 65437
    # PORT_NUMBER_QUANTIC_CHANNEL = 12348
    PORT_NUMBER_QUANTIC_CHANNEL = 13122
    SHARED_SECRET_KEY = b'IzetXlgAnY4oye56'

    ### INPUTS ###
    KEY_LENGTH_DEFAULT = 2048
    BYTES_PER_FRAME_DEFAULT = 10
    SYNC_FRAMES_DEFAULT = 10
    SYNC_BYTES_DEFAULT = 10

    TEST_FRACTION = 0.1
    NUM_THREADS_DEFAULT = 1

    PA_COMPRESSION_RATE = 0.5  # 0 - No Privacy Amplification | >0 - Toeplitz Privacy Amplification with compression rate (Should be <1) | <0 - XOR Privacy Amplification
    # KEY_QUEUE = queue.Queue() # Queue to save all keys generated by threads

    single_thread_bool = False

    if single_thread_bool:

        participant_bob_obj = QKDBobImplementation(IP_ADDRESS_ALICE, PORT_NUMBER_ALICE, IP_ADDRESS_BOB, PORT_NUMBER_BOB,
                                                   SHARED_SECRET_KEY)

        num_frames = KEY_LENGTH_DEFAULT // BYTES_PER_FRAME_DEFAULT

        bob_qubit_obj = participant_bob_obj.bob_quantum_step(KEY_LENGTH_DEFAULT, num_frames, BYTES_PER_FRAME_DEFAULT,
                                                             SYNC_FRAMES_DEFAULT, SYNC_BYTES_DEFAULT,
                                                             port_number_quantic_channel=PORT_NUMBER_QUANTIC_CHANNEL)

        participant_bob_obj.set_bob_detected_quantum_variables(bob_qubit_obj.detected_bits, bob_qubit_obj.detected_bases,
                                                               bob_qubit_obj.detected_qubits_bytes,
                                                               bob_qubit_obj.detected_idxs,
                                                               bob_qubit_obj.average_time_bin)

        participant_bob_obj.bob_run_simulation_classical_process(do_test=True, test_fraction=TEST_FRACTION,
                                                                 privacy_amplification_compression_rate=PA_COMPRESSION_RATE)

    else:

        quantum_channel_participant_bob_obj = QKDBobImplementation(IP_ADDRESS_ALICE, PORT_NUMBER_ALICE, IP_ADDRESS_BOB, PORT_NUMBER_BOB,
                                                                   SHARED_SECRET_KEY)

        number_of_keys = 1

        classical_channel_participant_bob_obj = QKDBobImplementation(IP_ADDRESS_ALICE, PORT_NUMBER_ALICE, IP_ADDRESS_BOB, PORT_NUMBER_BOB,
                                                                     SHARED_SECRET_KEY)

        classical_channel_participant_bob_obj.setup_role_bob()
        classical_channel_participant_bob_obj.start_read_communication_channel()

        start_execution_time_tick = time.perf_counter()
        for i in range(number_of_keys):
            print(f"Starting Thread: {i}")
            num_frames = KEY_LENGTH_DEFAULT // BYTES_PER_FRAME_DEFAULT

            bob_qubit_obj = quantum_channel_participant_bob_obj.bob_quantum_step(KEY_LENGTH_DEFAULT, num_frames,
                                                                                 BYTES_PER_FRAME_DEFAULT,
                                                                                 SYNC_FRAMES_DEFAULT, SYNC_BYTES_DEFAULT,
                                                                                 port_number_quantic_channel=PORT_NUMBER_QUANTIC_CHANNEL)

            classical_channel_participant_bob_obj.bob_run_qkd_classical_process_threading(bob_qubit_obj.detected_bits,
                                                                                          bob_qubit_obj.detected_bases,
                                                                                          bob_qubit_obj.qubits_bytes,
                                                                                          bob_qubit_obj.detected_idxs,
                                                                                          bob_qubit_obj.average_time_bin,
                                                                                          do_test=True,
                                                                                          test_fraction=TEST_FRACTION,
                                                                                          privacy_amplification_compression_rate=PA_COMPRESSION_RATE)

            print(f"End Thread\n")
        classical_channel_participant_bob_obj.bob_join_threads()
        end_execution_time_tick = time.perf_counter()
        print(f"Bob Total Execution Threading Time: {end_execution_time_tick - start_execution_time_tick}")